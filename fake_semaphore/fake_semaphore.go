// This file was generated by counterfeiter
package fake_semaphore

import (
	"sync"

	"github.com/pivotal-golang/semaphore"
)

type FakeSemaphore struct {
	AcquireStub        func() (semaphore.Resource, error)
	acquireMutex       sync.RWMutex
	acquireArgsForCall []struct{}
	acquireReturns     struct {
		result1 semaphore.Resource
		result2 error
	}
}

func (fake *FakeSemaphore) Acquire() (semaphore.Resource, error) {
	fake.acquireMutex.Lock()
	fake.acquireArgsForCall = append(fake.acquireArgsForCall, struct{}{})
	fake.acquireMutex.Unlock()
	if fake.AcquireStub != nil {
		return fake.AcquireStub()
	} else {
		return fake.acquireReturns.result1, fake.acquireReturns.result2
	}
}

func (fake *FakeSemaphore) AcquireCallCount() int {
	fake.acquireMutex.RLock()
	defer fake.acquireMutex.RUnlock()
	return len(fake.acquireArgsForCall)
}

func (fake *FakeSemaphore) AcquireReturns(result1 semaphore.Resource, result2 error) {
	fake.AcquireStub = nil
	fake.acquireReturns = struct {
		result1 semaphore.Resource
		result2 error
	}{result1, result2}
}

var _ semaphore.Semaphore = new(FakeSemaphore)
